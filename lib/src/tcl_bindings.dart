// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: non_constant_identifier_names, camel_case_types, avoid_private_typedef_functions, require_trailing_commas, constant_identifier_names

import 'dart:ffi' as ffi;

/// Bindings to Tcl
class TclBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  TclBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  TclBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// creates a new interpreter structure and returns a token for it
  ffi.Pointer<Tcl_Interp> Tcl_CreateInterp() {
    return _Tcl_CreateInterp();
  }

  late final _Tcl_CreateInterp_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_CreateInterp>>('Tcl_CreateInterp');
  late final _dart_Tcl_CreateInterp _Tcl_CreateInterp =
      _Tcl_CreateInterp_ptr.asFunction<_dart_Tcl_CreateInterp>();

  int Tcl_Init(
    ffi.Pointer<Tcl_Interp> interp,
  ) {
    return _Tcl_Init(
      interp,
    );
  }

  late final _Tcl_Init_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_Init>>('Tcl_Init');

  late final _dart_Tcl_Init _Tcl_Init =
      _Tcl_Init_ptr.asFunction<_dart_Tcl_Init>();

  int Tcl_GetErrorLine(
    ffi.Pointer<Tcl_Interp> interp,
  ) {
    return _Tcl_GetErrorLine(
      interp,
    );
  }

  late final _Tcl_GetErrorLine_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_GetErrorLine>>('Tcl_GetErrorLine');

  late final _dart_Tcl_GetErrorLine _Tcl_GetErrorLine =
      _Tcl_GetErrorLine_ptr.asFunction<_dart_Tcl_GetErrorLine>();

  /// const char * Tcl_ErrnoMsg(errorCode)
  /// Tcl_ErrnoId and Tcl_ErrnoMsg return string representations of errno values.
  ///  Tcl_ErrnoId returns a machine-readable textual identifier such as "EACCES" 
  /// that corresponds to the current value of errno. 
  /// Tcl_ErrnoMsg returns a human-readable string such as "permission denied" 
  /// that corresponds to the value of its errorCode argument. 
  /// The errorCode argument is typically the value returned by Tcl_GetErrno.
  ///  The strings returned by these functions are statically allocated and
  ///  the caller must not free or modify them.
  ffi.Pointer<ffi.Int8> Tcl_ErrnoMsg(int err) {
    return _Tcl_ErrnoMsg(err);
  }

  late final _Tcl_ErrnoMsg_ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'Tcl_ErrnoMsg');

  late final ffi.Pointer<ffi.Int8> Function(int) _Tcl_ErrnoMsg =
      _Tcl_ErrnoMsg_ptr.asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  int Tcl_GetErrno() {
    return _Tcl_GetErrno();
  }

  late final _Tcl_GetErrno_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_GetErrno>>('Tcl_GetErrno');
  late final _dart_Tcl_GetErrno _Tcl_GetErrno =
      _Tcl_GetErrno_ptr.asFunction<_dart_Tcl_GetErrno>();

  int Tcl_Eval(
    ffi.Pointer<Tcl_Interp> interp,
    ffi.Pointer<ffi.Int8> script,
  ) {
    return _Tcl_Eval(
      interp,
      script,
    );
  }

  late final _Tcl_Eval_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_Eval>>('Tcl_Eval');
  late final _dart_Tcl_Eval _Tcl_Eval =
      _Tcl_Eval_ptr.asFunction<_dart_Tcl_Eval>();

  int Tcl_EvalObj(
    ffi.Pointer<Tcl_Interp> interp,
    ffi.Pointer<Tcl_Obj> objPtr,
  ) {
    return _Tcl_EvalObj(
      interp,
      objPtr,
    );
  }

  late final _Tcl_EvalObj_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_EvalObj>>('Tcl_EvalObj');
  late final _dart_Tcl_EvalObj _Tcl_EvalObj =
      _Tcl_EvalObj_ptr.asFunction<_dart_Tcl_EvalObj>();

  ffi.Pointer<Tcl_Obj> Tcl_GetObjResult(
    ffi.Pointer<Tcl_Interp> interp,
  ) {
    return _Tcl_GetObjResult(
      interp,
    );
  }

  late final _Tcl_GetObjResult_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_GetObjResult>>('Tcl_GetObjResult');
  late final _dart_Tcl_GetObjResult _Tcl_GetObjResult =
      _Tcl_GetObjResult_ptr.asFunction<_dart_Tcl_GetObjResult>();

  ffi.Pointer<ffi.Int8> Tcl_GetString(
    ffi.Pointer<Tcl_Obj> objPtr,
  ) {
    return _Tcl_GetString(
      objPtr,
    );
  }

  late final _Tcl_GetString_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_GetString>>('Tcl_GetString');
  late final _dart_Tcl_GetString _Tcl_GetString =
      _Tcl_GetString_ptr.asFunction<_dart_Tcl_GetString>();

  ffi.Pointer<Tcl_Obj> Tcl_DuplicateObj(
    ffi.Pointer<Tcl_Obj> objPtr,
  ) {
    return _Tcl_DuplicateObj(
      objPtr,
    );
  }

  late final _Tcl_DuplicateObj_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_DuplicateObj>>('Tcl_DuplicateObj');
  late final _dart_Tcl_DuplicateObj _Tcl_DuplicateObj =
      _Tcl_DuplicateObj_ptr.asFunction<_dart_Tcl_DuplicateObj>();

  void TclFreeObj(
    ffi.Pointer<Tcl_Obj> objPtr,
  ) {
    return _TclFreeObj(
      objPtr,
    );
  }

  late final _TclFreeObj_ptr =
      _lookup<ffi.NativeFunction<_c_TclFreeObj>>('TclFreeObj');
  late final _dart_TclFreeObj _TclFreeObj =
      _TclFreeObj_ptr.asFunction<_dart_TclFreeObj>();

  int Tcl_GetBoolean(
    ffi.Pointer<Tcl_Interp> interp,
    ffi.Pointer<ffi.Int8> src,
    ffi.Pointer<ffi.Int32> boolPtr,
  ) {
    return _Tcl_GetBoolean(
      interp,
      src,
      boolPtr,
    );
  }

  late final _Tcl_GetBoolean_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_GetBoolean>>('Tcl_GetBoolean');
  late final _dart_Tcl_GetBoolean _Tcl_GetBoolean =
      _Tcl_GetBoolean_ptr.asFunction<_dart_Tcl_GetBoolean>();

  int Tcl_GetBooleanFromObj(
    ffi.Pointer<Tcl_Interp> interp,
    ffi.Pointer<Tcl_Obj> objPtr,
    ffi.Pointer<ffi.Int32> boolPtr,
  ) {
    return _Tcl_GetBooleanFromObj(
      interp,
      objPtr,
      boolPtr,
    );
  }

  late final _Tcl_GetBooleanFromObj_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_GetBooleanFromObj>>(
          'Tcl_GetBooleanFromObj');
  late final _dart_Tcl_GetBooleanFromObj _Tcl_GetBooleanFromObj =
      _Tcl_GetBooleanFromObj_ptr.asFunction<_dart_Tcl_GetBooleanFromObj>();

  ffi.Pointer<ffi.Uint8> Tcl_GetByteArrayFromObj(
    ffi.Pointer<Tcl_Obj> objPtr,
    ffi.Pointer<ffi.Int32> lengthPtr,
  ) {
    return _Tcl_GetByteArrayFromObj(
      objPtr,
      lengthPtr,
    );
  }

  late final _Tcl_GetByteArrayFromObj_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_GetByteArrayFromObj>>(
          'Tcl_GetByteArrayFromObj');
  late final _dart_Tcl_GetByteArrayFromObj _Tcl_GetByteArrayFromObj =
      _Tcl_GetByteArrayFromObj_ptr.asFunction<_dart_Tcl_GetByteArrayFromObj>();

  int Tcl_GetDouble(
    ffi.Pointer<Tcl_Interp> interp,
    ffi.Pointer<ffi.Int8> src,
    ffi.Pointer<ffi.Double> doublePtr,
  ) {
    return _Tcl_GetDouble(
      interp,
      src,
      doublePtr,
    );
  }

  late final _Tcl_GetDouble_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_GetDouble>>('Tcl_GetDouble');
  late final _dart_Tcl_GetDouble _Tcl_GetDouble =
      _Tcl_GetDouble_ptr.asFunction<_dart_Tcl_GetDouble>();

  int Tcl_GetDoubleFromObj(
    ffi.Pointer<Tcl_Interp> interp,
    ffi.Pointer<Tcl_Obj> objPtr,
    ffi.Pointer<ffi.Double> doublePtr,
  ) {
    return _Tcl_GetDoubleFromObj(
      interp,
      objPtr,
      doublePtr,
    );
  }

  late final _Tcl_GetDoubleFromObj_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_GetDoubleFromObj>>(
          'Tcl_GetDoubleFromObj');
  late final _dart_Tcl_GetDoubleFromObj _Tcl_GetDoubleFromObj =
      _Tcl_GetDoubleFromObj_ptr.asFunction<_dart_Tcl_GetDoubleFromObj>();

  int Tcl_GetIndexFromObj(
    ffi.Pointer<Tcl_Interp> interp,
    ffi.Pointer<Tcl_Obj> objPtr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> tablePtr,
    ffi.Pointer<ffi.Int8> msg,
    int flags,
    ffi.Pointer<ffi.Int32> indexPtr,
  ) {
    return _Tcl_GetIndexFromObj(
      interp,
      objPtr,
      tablePtr,
      msg,
      flags,
      indexPtr,
    );
  }

  late final _Tcl_GetIndexFromObj_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_GetIndexFromObj>>(
          'Tcl_GetIndexFromObj');
  late final _dart_Tcl_GetIndexFromObj _Tcl_GetIndexFromObj =
      _Tcl_GetIndexFromObj_ptr.asFunction<_dart_Tcl_GetIndexFromObj>();

  int Tcl_GetInt(
    ffi.Pointer<Tcl_Interp> interp,
    ffi.Pointer<ffi.Int8> src,
    ffi.Pointer<ffi.Int32> intPtr,
  ) {
    return _Tcl_GetInt(
      interp,
      src,
      intPtr,
    );
  }

  late final _Tcl_GetInt_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_GetInt>>('Tcl_GetInt');
  late final _dart_Tcl_GetInt _Tcl_GetInt =
      _Tcl_GetInt_ptr.asFunction<_dart_Tcl_GetInt>();

  int Tcl_GetIntFromObj(
    ffi.Pointer<Tcl_Interp> interp,
    ffi.Pointer<Tcl_Obj> objPtr,
    ffi.Pointer<ffi.Int32> intPtr,
  ) {
    return _Tcl_GetIntFromObj(
      interp,
      objPtr,
      intPtr,
    );
  }

  late final _Tcl_GetIntFromObj_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_GetIntFromObj>>('Tcl_GetIntFromObj');
  late final _dart_Tcl_GetIntFromObj _Tcl_GetIntFromObj =
      _Tcl_GetIntFromObj_ptr.asFunction<_dart_Tcl_GetIntFromObj>();

  int Tcl_GetLongFromObj(
    ffi.Pointer<Tcl_Interp> interp,
    ffi.Pointer<Tcl_Obj> objPtr,
    ffi.Pointer<ffi.Int64> longPtr,
  ) {
    return _Tcl_GetLongFromObj(
      interp,
      objPtr,
      longPtr,
    );
  }

  late final _Tcl_GetLongFromObj_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_GetLongFromObj>>('Tcl_GetLongFromObj');
  late final _dart_Tcl_GetLongFromObj _Tcl_GetLongFromObj =
      _Tcl_GetLongFromObj_ptr.asFunction<_dart_Tcl_GetLongFromObj>();

  ffi.Pointer<Tcl_ObjType> Tcl_GetObjType(
    ffi.Pointer<ffi.Int8> typeName,
  ) {
    return _Tcl_GetObjType(
      typeName,
    );
  }

  late final _Tcl_GetObjType_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_GetObjType>>('Tcl_GetObjType');
  late final _dart_Tcl_GetObjType _Tcl_GetObjType =
      _Tcl_GetObjType_ptr.asFunction<_dart_Tcl_GetObjType>();

  ffi.Pointer<ffi.Int8> Tcl_GetStringFromObj(
    ffi.Pointer<Tcl_Obj> objPtr,
    ffi.Pointer<ffi.Int32> lengthPtr,
  ) {
    return _Tcl_GetStringFromObj(
      objPtr,
      lengthPtr,
    );
  }

  late final _Tcl_GetStringFromObj_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_GetStringFromObj>>(
          'Tcl_GetStringFromObj');
  late final _dart_Tcl_GetStringFromObj _Tcl_GetStringFromObj =
      _Tcl_GetStringFromObj_ptr.asFunction<_dart_Tcl_GetStringFromObj>();

  void Tcl_InvalidateStringRep(
    ffi.Pointer<Tcl_Obj> objPtr,
  ) {
    return _Tcl_InvalidateStringRep(
      objPtr,
    );
  }

  late final _Tcl_InvalidateStringRep_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_InvalidateStringRep>>(
          'Tcl_InvalidateStringRep');
  late final _dart_Tcl_InvalidateStringRep _Tcl_InvalidateStringRep =
      _Tcl_InvalidateStringRep_ptr.asFunction<_dart_Tcl_InvalidateStringRep>();

  int Tcl_ListObjAppendList(
    ffi.Pointer<Tcl_Interp> interp,
    ffi.Pointer<Tcl_Obj> listPtr,
    ffi.Pointer<Tcl_Obj> elemListPtr,
  ) {
    return _Tcl_ListObjAppendList(
      interp,
      listPtr,
      elemListPtr,
    );
  }

  late final _Tcl_ListObjAppendList_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_ListObjAppendList>>(
          'Tcl_ListObjAppendList');
  late final _dart_Tcl_ListObjAppendList _Tcl_ListObjAppendList =
      _Tcl_ListObjAppendList_ptr.asFunction<_dart_Tcl_ListObjAppendList>();

  int Tcl_ListObjAppendElement(
    ffi.Pointer<Tcl_Interp> interp,
    ffi.Pointer<Tcl_Obj> listPtr,
    ffi.Pointer<Tcl_Obj> objPtr,
  ) {
    return _Tcl_ListObjAppendElement(
      interp,
      listPtr,
      objPtr,
    );
  }

  late final _Tcl_ListObjAppendElement_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_ListObjAppendElement>>(
          'Tcl_ListObjAppendElement');
  late final _dart_Tcl_ListObjAppendElement _Tcl_ListObjAppendElement =
      _Tcl_ListObjAppendElement_ptr.asFunction<
          _dart_Tcl_ListObjAppendElement>();

  int Tcl_ListObjGetElements(
    ffi.Pointer<Tcl_Interp> interp,
    ffi.Pointer<Tcl_Obj> listPtr,
    ffi.Pointer<ffi.Int32> objcPtr,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<Tcl_Obj>>> objvPtr,
  ) {
    return _Tcl_ListObjGetElements(
      interp,
      listPtr,
      objcPtr,
      objvPtr,
    );
  }

  late final _Tcl_ListObjGetElements_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_ListObjGetElements>>(
          'Tcl_ListObjGetElements');
  late final _dart_Tcl_ListObjGetElements _Tcl_ListObjGetElements =
      _Tcl_ListObjGetElements_ptr.asFunction<_dart_Tcl_ListObjGetElements>();

  int Tcl_ListObjIndex(
    ffi.Pointer<Tcl_Interp> interp,
    ffi.Pointer<Tcl_Obj> listPtr,
    int index,
    ffi.Pointer<ffi.Pointer<Tcl_Obj>> objPtrPtr,
  ) {
    return _Tcl_ListObjIndex(
      interp,
      listPtr,
      index,
      objPtrPtr,
    );
  }

  late final _Tcl_ListObjIndex_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_ListObjIndex>>('Tcl_ListObjIndex');
  late final _dart_Tcl_ListObjIndex _Tcl_ListObjIndex =
      _Tcl_ListObjIndex_ptr.asFunction<_dart_Tcl_ListObjIndex>();

  int Tcl_ListObjLength(
    ffi.Pointer<Tcl_Interp> interp,
    ffi.Pointer<Tcl_Obj> listPtr,
    ffi.Pointer<ffi.Int32> lengthPtr,
  ) {
    return _Tcl_ListObjLength(
      interp,
      listPtr,
      lengthPtr,
    );
  }

  late final _Tcl_ListObjLength_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_ListObjLength>>('Tcl_ListObjLength');
  late final _dart_Tcl_ListObjLength _Tcl_ListObjLength =
      _Tcl_ListObjLength_ptr.asFunction<_dart_Tcl_ListObjLength>();

  int Tcl_ListObjReplace(
    ffi.Pointer<Tcl_Interp> interp,
    ffi.Pointer<Tcl_Obj> listPtr,
    int first,
    int count,
    int objc,
    ffi.Pointer<ffi.Pointer<Tcl_Obj>> objv,
  ) {
    return _Tcl_ListObjReplace(
      interp,
      listPtr,
      first,
      count,
      objc,
      objv,
    );
  }

  late final _Tcl_ListObjReplace_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_ListObjReplace>>('Tcl_ListObjReplace');
  late final _dart_Tcl_ListObjReplace _Tcl_ListObjReplace =
      _Tcl_ListObjReplace_ptr.asFunction<_dart_Tcl_ListObjReplace>();

  ffi.Pointer<Tcl_Obj> Tcl_NewBooleanObj(
    int boolValue,
  ) {
    return _Tcl_NewBooleanObj(
      boolValue,
    );
  }

  late final _Tcl_NewBooleanObj_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_NewBooleanObj>>('Tcl_NewBooleanObj');
  late final _dart_Tcl_NewBooleanObj _Tcl_NewBooleanObj =
      _Tcl_NewBooleanObj_ptr.asFunction<_dart_Tcl_NewBooleanObj>();

  ffi.Pointer<Tcl_Obj> Tcl_NewByteArrayObj(
    ffi.Pointer<ffi.Uint8> bytes,
    int length,
  ) {
    return _Tcl_NewByteArrayObj(
      bytes,
      length,
    );
  }

  late final _Tcl_NewByteArrayObj_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_NewByteArrayObj>>(
          'Tcl_NewByteArrayObj');
  late final _dart_Tcl_NewByteArrayObj _Tcl_NewByteArrayObj =
      _Tcl_NewByteArrayObj_ptr.asFunction<_dart_Tcl_NewByteArrayObj>();

  ffi.Pointer<Tcl_Obj> Tcl_NewDoubleObj(
    double doubleValue,
  ) {
    return _Tcl_NewDoubleObj(
      doubleValue,
    );
  }

  late final _Tcl_NewDoubleObj_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_NewDoubleObj>>('Tcl_NewDoubleObj');
  late final _dart_Tcl_NewDoubleObj _Tcl_NewDoubleObj =
      _Tcl_NewDoubleObj_ptr.asFunction<_dart_Tcl_NewDoubleObj>();

  ffi.Pointer<Tcl_Obj> Tcl_NewIntObj(
    int intValue,
  ) {
    return _Tcl_NewIntObj(
      intValue,
    );
  }

  late final _Tcl_NewIntObj_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_NewIntObj>>('Tcl_NewIntObj');
  late final _dart_Tcl_NewIntObj _Tcl_NewIntObj =
      _Tcl_NewIntObj_ptr.asFunction<_dart_Tcl_NewIntObj>();

  ffi.Pointer<Tcl_Obj> Tcl_NewStringObj(
    ffi.Pointer<ffi.Int8> bytes,
    int length,
  ) {
    return _Tcl_NewStringObj(
      bytes,
      length,
    );
  }

  late final _Tcl_NewStringObj_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_NewStringObj>>('Tcl_NewStringObj');
  late final _dart_Tcl_NewStringObj _Tcl_NewStringObj =
      _Tcl_NewStringObj_ptr.asFunction<_dart_Tcl_NewStringObj>();

  ffi.Pointer<Tcl_Obj> Tcl_NewListObj(
    int objc,
    ffi.Pointer<ffi.Pointer<Tcl_Obj>> objv,
  ) {
    return _Tcl_NewListObj(
      objc,
      objv,
    );
  }

  late final _Tcl_NewListObj_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_NewListObj>>('Tcl_NewListObj');
  late final _dart_Tcl_NewListObj _Tcl_NewListObj =
      _Tcl_NewListObj_ptr.asFunction<_dart_Tcl_NewListObj>();

  ffi.Pointer<ffi.Int8> Tcl_GetVar(
    ffi.Pointer<Tcl_Interp> interp,
    ffi.Pointer<ffi.Int8> varName,
    int flags,
  ) {
    return _Tcl_GetVar(
      interp,
      varName,
      flags,
    );
  }

  late final _Tcl_GetVar_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_GetVar>>('Tcl_GetVar');
  late final _dart_Tcl_GetVar _Tcl_GetVar =
      _Tcl_GetVar_ptr.asFunction<_dart_Tcl_GetVar>();

  ffi.Pointer<ffi.Int8> Tcl_GetVar2(
    ffi.Pointer<Tcl_Interp> interp,
    ffi.Pointer<ffi.Int8> part1,
    ffi.Pointer<ffi.Int8> part2,
    int flags,
  ) {
    return _Tcl_GetVar2(
      interp,
      part1,
      part2,
      flags,
    );
  }

  late final _Tcl_GetVar2_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_GetVar2>>('Tcl_GetVar2');
  late final _dart_Tcl_GetVar2 _Tcl_GetVar2 =
      _Tcl_GetVar2_ptr.asFunction<_dart_Tcl_GetVar2>();

  ffi.Pointer<ffi.Int8> Tcl_SetVar(
    ffi.Pointer<Tcl_Interp> interp,
    ffi.Pointer<ffi.Int8> varName,
    ffi.Pointer<ffi.Int8> newValue,
    int flags,
  ) {
    return _Tcl_SetVar(
      interp,
      varName,
      newValue,
      flags,
    );
  }

  late final _Tcl_SetVar_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_SetVar>>('Tcl_SetVar');
  late final _dart_Tcl_SetVar _Tcl_SetVar =
      _Tcl_SetVar_ptr.asFunction<_dart_Tcl_SetVar>();

  ffi.Pointer<ffi.Int8> Tcl_SetVar2(
    ffi.Pointer<Tcl_Interp> interp,
    ffi.Pointer<ffi.Int8> part1,
    ffi.Pointer<ffi.Int8> part2,
    ffi.Pointer<ffi.Int8> newValue,
    int flags,
  ) {
    return _Tcl_SetVar2(
      interp,
      part1,
      part2,
      newValue,
      flags,
    );
  }

  late final _Tcl_SetVar2_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_SetVar2>>('Tcl_SetVar2');
  late final _dart_Tcl_SetVar2 _Tcl_SetVar2 =
      _Tcl_SetVar2_ptr.asFunction<_dart_Tcl_SetVar2>();

  ffi.Pointer<Tcl_Obj> Tcl_ObjSetVar2(
    ffi.Pointer<Tcl_Interp> interp,
    ffi.Pointer<Tcl_Obj> part1Ptr,
    ffi.Pointer<Tcl_Obj> part2Ptr,
    ffi.Pointer<Tcl_Obj> newValuePtr,
    int flags,
  ) {
    return _Tcl_ObjSetVar2(
      interp,
      part1Ptr,
      part2Ptr,
      newValuePtr,
      flags,
    );
  }

  late final _Tcl_ObjSetVar2_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_ObjSetVar2>>('Tcl_ObjSetVar2');
  late final _dart_Tcl_ObjSetVar2 _Tcl_ObjSetVar2 =
      _Tcl_ObjSetVar2_ptr.asFunction<_dart_Tcl_ObjSetVar2>();

  ffi.Pointer<Tcl_Obj> Tcl_ObjGetVar2(
    ffi.Pointer<Tcl_Interp> interp,
    ffi.Pointer<Tcl_Obj> part1Ptr,
    ffi.Pointer<Tcl_Obj> part2Ptr,
    int flags,
  ) {
    return _Tcl_ObjGetVar2(
      interp,
      part1Ptr,
      part2Ptr,
      flags,
    );
  }

  late final _Tcl_ObjGetVar2_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_ObjGetVar2>>('Tcl_ObjGetVar2');
  late final _dart_Tcl_ObjGetVar2 _Tcl_ObjGetVar2 =
      _Tcl_ObjGetVar2_ptr.asFunction<_dart_Tcl_ObjGetVar2>();

  int Tcl_UnsetVar(
    ffi.Pointer<Tcl_Interp> interp,
    ffi.Pointer<ffi.Int8> varName,
    int flags,
  ) {
    return _Tcl_UnsetVar(
      interp,
      varName,
      flags,
    );
  }

  late final _Tcl_UnsetVar_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_UnsetVar>>('Tcl_UnsetVar');
  late final _dart_Tcl_UnsetVar _Tcl_UnsetVar =
      _Tcl_UnsetVar_ptr.asFunction<_dart_Tcl_UnsetVar>();

  int Tcl_UnsetVar2(
    ffi.Pointer<Tcl_Interp> interp,
    ffi.Pointer<ffi.Int8> part1,
    ffi.Pointer<ffi.Int8> part2,
    int flags,
  ) {
    return _Tcl_UnsetVar2(
      interp,
      part1,
      part2,
      flags,
    );
  }

  late final _Tcl_UnsetVar2_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_UnsetVar2>>('Tcl_UnsetVar2');
  late final _dart_Tcl_UnsetVar2 _Tcl_UnsetVar2 =
      _Tcl_UnsetVar2_ptr.asFunction<_dart_Tcl_UnsetVar2>();

  void Tcl_FreeResult(
    ffi.Pointer<Tcl_Interp> interp,
  ) {
    return _Tcl_FreeResult(
      interp,
    );
  }

  late final _Tcl_FreeResult_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_FreeResult>>('Tcl_FreeResult');
  late final _dart_Tcl_FreeResult _Tcl_FreeResult =
      _Tcl_FreeResult_ptr.asFunction<_dart_Tcl_FreeResult>();

  ffi.Pointer<Tcl_Command_> Tcl_CreateObjCommand(
    ffi.Pointer<Tcl_Interp> interp,
    ffi.Pointer<ffi.Int8> cmdName,
    ffi.Pointer<ffi.NativeFunction<Tcl_ObjCmdProc>> proc,
    ffi.Pointer<ffi.Int32> clientData,
    ffi.Pointer<ffi.NativeFunction<Tcl_CmdDeleteProc>> deleteProc,
  ) {
    return _Tcl_CreateObjCommand(
      interp,
      cmdName,
      proc,
      clientData,
      deleteProc,
    );
  }

  late final _Tcl_CreateObjCommand_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_CreateObjCommand>>(
          'Tcl_CreateObjCommand');
  late final _dart_Tcl_CreateObjCommand _Tcl_CreateObjCommand =
      _Tcl_CreateObjCommand_ptr.asFunction<_dart_Tcl_CreateObjCommand>();

  int Tcl_DeleteCommand(
    ffi.Pointer<Tcl_Interp> interp,
    ffi.Pointer<ffi.Int8> cmdName,
  ) {
    return _Tcl_DeleteCommand(
      interp,
      cmdName,
    );
  }

  late final _Tcl_DeleteCommand_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_DeleteCommand>>('Tcl_DeleteCommand');
  late final _dart_Tcl_DeleteCommand _Tcl_DeleteCommand =
      _Tcl_DeleteCommand_ptr.asFunction<_dart_Tcl_DeleteCommand>();

  int Tcl_GetCommandInfo(
    ffi.Pointer<Tcl_Interp> interp,
    ffi.Pointer<ffi.Int8> cmdName,
    ffi.Pointer<Tcl_CmdInfo> infoPtr,
  ) {
    return _Tcl_GetCommandInfo(
      interp,
      cmdName,
      infoPtr,
    );
  }

  late final _Tcl_GetCommandInfo_ptr =
      _lookup<ffi.NativeFunction<_c_Tcl_GetCommandInfo>>('Tcl_GetCommandInfo');
  late final _dart_Tcl_GetCommandInfo _Tcl_GetCommandInfo =
      _Tcl_GetCommandInfo_ptr.asFunction<_dart_Tcl_GetCommandInfo>();
}

class Tcl_Interp extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> result;

  external ffi.Pointer<ffi.NativeFunction<Tcl_FreeProc>> freeProc;

  @ffi.Int32()
  external int errorLine;
}

class Tcl_Obj extends ffi.Opaque {}

class Tcl_ObjType extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.NativeFunction<Tcl_FreeInternalRepProc>>
      freeIntRepProc;

  external ffi.Pointer<ffi.NativeFunction<Tcl_DupInternalRepProc>>
      dupIntRepProc;

  external ffi.Pointer<ffi.NativeFunction<Tcl_UpdateStringProc>>
      updateStringProc;

  external ffi.Pointer<ffi.NativeFunction<Tcl_SetFromAnyProc>> setFromAnyProc;
}

class Tcl_Command_ extends ffi.Opaque {}

class Tcl_CmdProc_ extends ffi.Opaque {}

class Tcl_Namespace extends ffi.Opaque {}

class Tcl_CmdInfo extends ffi.Struct {
  @ffi.Int32()
  external int isNativeObjectProc;

  external ffi.Pointer<ffi.NativeFunction<Tcl_ObjCmdProc>> objProc;

  external ffi.Pointer<ffi.Int32> objClientData;

  external ffi.Pointer<ffi.Pointer<Tcl_CmdProc_>> proc;

  external ffi.Pointer<ffi.Int32> clientData;

  external ffi.Pointer<ffi.NativeFunction<Tcl_CmdDeleteProc>> deleteProc;

  external ffi.Pointer<ffi.Int32> deleteData;

  external ffi.Pointer<ffi.Pointer<Tcl_Namespace>> namespacePtr;
}

//const String FFI_SCOPE = 'tcl';

typedef _c_Tcl_CreateInterp = ffi.Pointer<Tcl_Interp> Function();

typedef _dart_Tcl_CreateInterp = ffi.Pointer<Tcl_Interp> Function();

typedef _c_Tcl_Init = ffi.Int32 Function(
  ffi.Pointer<Tcl_Interp> interp,
);

typedef _dart_Tcl_Init = int Function(
  ffi.Pointer<Tcl_Interp> interp,
);

typedef _c_Tcl_GetErrorLine = ffi.Int32 Function(
  ffi.Pointer<Tcl_Interp> interp,
);

typedef _dart_Tcl_GetErrorLine = int Function(
  ffi.Pointer<Tcl_Interp> interp,
);

typedef _c_Tcl_GetErrno = ffi.Int32 Function();

typedef _dart_Tcl_GetErrno = int Function();

typedef _c_Tcl_Eval = ffi.Int32 Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<ffi.Int8> script,
);

typedef _dart_Tcl_Eval = int Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<ffi.Int8> script,
);

typedef _c_Tcl_EvalObj = ffi.Int32 Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<Tcl_Obj> objPtr,
);

typedef _dart_Tcl_EvalObj = int Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<Tcl_Obj> objPtr,
);

typedef _c_Tcl_GetObjResult = ffi.Pointer<Tcl_Obj> Function(
  ffi.Pointer<Tcl_Interp> interp,
);

typedef _dart_Tcl_GetObjResult = ffi.Pointer<Tcl_Obj> Function(
  ffi.Pointer<Tcl_Interp> interp,
);

typedef _c_Tcl_GetString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Tcl_Obj> objPtr,
);

typedef _dart_Tcl_GetString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Tcl_Obj> objPtr,
);

typedef _c_Tcl_DuplicateObj = ffi.Pointer<Tcl_Obj> Function(
  ffi.Pointer<Tcl_Obj> objPtr,
);

typedef _dart_Tcl_DuplicateObj = ffi.Pointer<Tcl_Obj> Function(
  ffi.Pointer<Tcl_Obj> objPtr,
);

typedef _c_TclFreeObj = ffi.Void Function(
  ffi.Pointer<Tcl_Obj> objPtr,
);

typedef _dart_TclFreeObj = void Function(
  ffi.Pointer<Tcl_Obj> objPtr,
);

typedef _c_Tcl_GetBoolean = ffi.Int32 Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<ffi.Int8> src,
  ffi.Pointer<ffi.Int32> boolPtr,
);

typedef _dart_Tcl_GetBoolean = int Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<ffi.Int8> src,
  ffi.Pointer<ffi.Int32> boolPtr,
);

typedef _c_Tcl_GetBooleanFromObj = ffi.Int32 Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<Tcl_Obj> objPtr,
  ffi.Pointer<ffi.Int32> boolPtr,
);

typedef _dart_Tcl_GetBooleanFromObj = int Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<Tcl_Obj> objPtr,
  ffi.Pointer<ffi.Int32> boolPtr,
);

typedef _c_Tcl_GetByteArrayFromObj = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<Tcl_Obj> objPtr,
  ffi.Pointer<ffi.Int32> lengthPtr,
);

typedef _dart_Tcl_GetByteArrayFromObj = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<Tcl_Obj> objPtr,
  ffi.Pointer<ffi.Int32> lengthPtr,
);

typedef _c_Tcl_GetDouble = ffi.Int32 Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<ffi.Int8> src,
  ffi.Pointer<ffi.Double> doublePtr,
);

typedef _dart_Tcl_GetDouble = int Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<ffi.Int8> src,
  ffi.Pointer<ffi.Double> doublePtr,
);

typedef _c_Tcl_GetDoubleFromObj = ffi.Int32 Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<Tcl_Obj> objPtr,
  ffi.Pointer<ffi.Double> doublePtr,
);

typedef _dart_Tcl_GetDoubleFromObj = int Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<Tcl_Obj> objPtr,
  ffi.Pointer<ffi.Double> doublePtr,
);

typedef _c_Tcl_GetIndexFromObj = ffi.Int32 Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<Tcl_Obj> objPtr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> tablePtr,
  ffi.Pointer<ffi.Int8> msg,
  ffi.Int32 flags,
  ffi.Pointer<ffi.Int32> indexPtr,
);

typedef _dart_Tcl_GetIndexFromObj = int Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<Tcl_Obj> objPtr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> tablePtr,
  ffi.Pointer<ffi.Int8> msg,
  int flags,
  ffi.Pointer<ffi.Int32> indexPtr,
);

typedef _c_Tcl_GetInt = ffi.Int32 Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<ffi.Int8> src,
  ffi.Pointer<ffi.Int32> intPtr,
);

typedef _dart_Tcl_GetInt = int Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<ffi.Int8> src,
  ffi.Pointer<ffi.Int32> intPtr,
);

typedef _c_Tcl_GetIntFromObj = ffi.Int32 Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<Tcl_Obj> objPtr,
  ffi.Pointer<ffi.Int32> intPtr,
);

typedef _dart_Tcl_GetIntFromObj = int Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<Tcl_Obj> objPtr,
  ffi.Pointer<ffi.Int32> intPtr,
);

typedef _c_Tcl_GetLongFromObj = ffi.Int32 Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<Tcl_Obj> objPtr,
  ffi.Pointer<ffi.Int64> longPtr,
);

typedef _dart_Tcl_GetLongFromObj = int Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<Tcl_Obj> objPtr,
  ffi.Pointer<ffi.Int64> longPtr,
);

typedef _c_Tcl_GetObjType = ffi.Pointer<Tcl_ObjType> Function(
  ffi.Pointer<ffi.Int8> typeName,
);

typedef _dart_Tcl_GetObjType = ffi.Pointer<Tcl_ObjType> Function(
  ffi.Pointer<ffi.Int8> typeName,
);

typedef _c_Tcl_GetStringFromObj = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Tcl_Obj> objPtr,
  ffi.Pointer<ffi.Int32> lengthPtr,
);

typedef _dart_Tcl_GetStringFromObj = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Tcl_Obj> objPtr,
  ffi.Pointer<ffi.Int32> lengthPtr,
);

typedef _c_Tcl_InvalidateStringRep = ffi.Void Function(
  ffi.Pointer<Tcl_Obj> objPtr,
);

typedef _dart_Tcl_InvalidateStringRep = void Function(
  ffi.Pointer<Tcl_Obj> objPtr,
);

typedef _c_Tcl_ListObjAppendList = ffi.Int32 Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<Tcl_Obj> listPtr,
  ffi.Pointer<Tcl_Obj> elemListPtr,
);

typedef _dart_Tcl_ListObjAppendList = int Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<Tcl_Obj> listPtr,
  ffi.Pointer<Tcl_Obj> elemListPtr,
);

typedef _c_Tcl_ListObjAppendElement = ffi.Int32 Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<Tcl_Obj> listPtr,
  ffi.Pointer<Tcl_Obj> objPtr,
);

typedef _dart_Tcl_ListObjAppendElement = int Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<Tcl_Obj> listPtr,
  ffi.Pointer<Tcl_Obj> objPtr,
);

typedef _c_Tcl_ListObjGetElements = ffi.Int32 Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<Tcl_Obj> listPtr,
  ffi.Pointer<ffi.Int32> objcPtr,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<Tcl_Obj>>> objvPtr,
);

typedef _dart_Tcl_ListObjGetElements = int Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<Tcl_Obj> listPtr,
  ffi.Pointer<ffi.Int32> objcPtr,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<Tcl_Obj>>> objvPtr,
);

typedef _c_Tcl_ListObjIndex = ffi.Int32 Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<Tcl_Obj> listPtr,
  ffi.Int32 index,
  ffi.Pointer<ffi.Pointer<Tcl_Obj>> objPtrPtr,
);

typedef _dart_Tcl_ListObjIndex = int Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<Tcl_Obj> listPtr,
  int index,
  ffi.Pointer<ffi.Pointer<Tcl_Obj>> objPtrPtr,
);

typedef _c_Tcl_ListObjLength = ffi.Int32 Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<Tcl_Obj> listPtr,
  ffi.Pointer<ffi.Int32> lengthPtr,
);

typedef _dart_Tcl_ListObjLength = int Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<Tcl_Obj> listPtr,
  ffi.Pointer<ffi.Int32> lengthPtr,
);

typedef _c_Tcl_ListObjReplace = ffi.Int32 Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<Tcl_Obj> listPtr,
  ffi.Int32 first,
  ffi.Int32 count,
  ffi.Int32 objc,
  ffi.Pointer<ffi.Pointer<Tcl_Obj>> objv,
);

typedef _dart_Tcl_ListObjReplace = int Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<Tcl_Obj> listPtr,
  int first,
  int count,
  int objc,
  ffi.Pointer<ffi.Pointer<Tcl_Obj>> objv,
);

typedef _c_Tcl_NewBooleanObj = ffi.Pointer<Tcl_Obj> Function(
  ffi.Int32 boolValue,
);

typedef _dart_Tcl_NewBooleanObj = ffi.Pointer<Tcl_Obj> Function(
  int boolValue,
);

typedef _c_Tcl_NewByteArrayObj = ffi.Pointer<Tcl_Obj> Function(
  ffi.Pointer<ffi.Uint8> bytes,
  ffi.Int32 length,
);

typedef _dart_Tcl_NewByteArrayObj = ffi.Pointer<Tcl_Obj> Function(
  ffi.Pointer<ffi.Uint8> bytes,
  int length,
);

typedef _c_Tcl_NewDoubleObj = ffi.Pointer<Tcl_Obj> Function(
  ffi.Double doubleValue,
);

typedef _dart_Tcl_NewDoubleObj = ffi.Pointer<Tcl_Obj> Function(
  double doubleValue,
);

typedef _c_Tcl_NewIntObj = ffi.Pointer<Tcl_Obj> Function(
  ffi.Int32 intValue,
);

typedef _dart_Tcl_NewIntObj = ffi.Pointer<Tcl_Obj> Function(
  int intValue,
);

typedef _c_Tcl_NewStringObj = ffi.Pointer<Tcl_Obj> Function(
  ffi.Pointer<ffi.Int8> bytes,
  ffi.Int32 length,
);

typedef _dart_Tcl_NewStringObj = ffi.Pointer<Tcl_Obj> Function(
  ffi.Pointer<ffi.Int8> bytes,
  int length,
);

typedef _c_Tcl_NewListObj = ffi.Pointer<Tcl_Obj> Function(
  ffi.Int32 objc,
  ffi.Pointer<ffi.Pointer<Tcl_Obj>> objv,
);

typedef _dart_Tcl_NewListObj = ffi.Pointer<Tcl_Obj> Function(
  int objc,
  ffi.Pointer<ffi.Pointer<Tcl_Obj>> objv,
);

typedef _c_Tcl_GetVar = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<ffi.Int8> varName,
  ffi.Int32 flags,
);

typedef _dart_Tcl_GetVar = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<ffi.Int8> varName,
  int flags,
);

typedef _c_Tcl_GetVar2 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<ffi.Int8> part1,
  ffi.Pointer<ffi.Int8> part2,
  ffi.Int32 flags,
);

typedef _dart_Tcl_GetVar2 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<ffi.Int8> part1,
  ffi.Pointer<ffi.Int8> part2,
  int flags,
);

typedef _c_Tcl_SetVar = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<ffi.Int8> varName,
  ffi.Pointer<ffi.Int8> newValue,
  ffi.Int32 flags,
);

typedef _dart_Tcl_SetVar = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<ffi.Int8> varName,
  ffi.Pointer<ffi.Int8> newValue,
  int flags,
);

typedef _c_Tcl_SetVar2 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<ffi.Int8> part1,
  ffi.Pointer<ffi.Int8> part2,
  ffi.Pointer<ffi.Int8> newValue,
  ffi.Int32 flags,
);

typedef _dart_Tcl_SetVar2 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<ffi.Int8> part1,
  ffi.Pointer<ffi.Int8> part2,
  ffi.Pointer<ffi.Int8> newValue,
  int flags,
);

typedef _c_Tcl_ObjSetVar2 = ffi.Pointer<Tcl_Obj> Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<Tcl_Obj> part1Ptr,
  ffi.Pointer<Tcl_Obj> part2Ptr,
  ffi.Pointer<Tcl_Obj> newValuePtr,
  ffi.Int32 flags,
);

typedef _dart_Tcl_ObjSetVar2 = ffi.Pointer<Tcl_Obj> Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<Tcl_Obj> part1Ptr,
  ffi.Pointer<Tcl_Obj> part2Ptr,
  ffi.Pointer<Tcl_Obj> newValuePtr,
  int flags,
);

typedef _c_Tcl_ObjGetVar2 = ffi.Pointer<Tcl_Obj> Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<Tcl_Obj> part1Ptr,
  ffi.Pointer<Tcl_Obj> part2Ptr,
  ffi.Int32 flags,
);

typedef _dart_Tcl_ObjGetVar2 = ffi.Pointer<Tcl_Obj> Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<Tcl_Obj> part1Ptr,
  ffi.Pointer<Tcl_Obj> part2Ptr,
  int flags,
);

typedef _c_Tcl_UnsetVar = ffi.Int32 Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<ffi.Int8> varName,
  ffi.Int32 flags,
);

typedef _dart_Tcl_UnsetVar = int Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<ffi.Int8> varName,
  int flags,
);

typedef _c_Tcl_UnsetVar2 = ffi.Int32 Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<ffi.Int8> part1,
  ffi.Pointer<ffi.Int8> part2,
  ffi.Int32 flags,
);

typedef _dart_Tcl_UnsetVar2 = int Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<ffi.Int8> part1,
  ffi.Pointer<ffi.Int8> part2,
  int flags,
);

typedef _c_Tcl_FreeResult = ffi.Void Function(
  ffi.Pointer<Tcl_Interp> interp,
);

typedef _dart_Tcl_FreeResult = void Function(
  ffi.Pointer<Tcl_Interp> interp,
);

typedef Tcl_ObjCmdProc = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32>,
  ffi.Pointer<Tcl_Interp>,
  ffi.Int32,
  ffi.Pointer<ffi.Pointer<Tcl_Obj>>,
);

typedef Tcl_CmdDeleteProc = ffi.Void Function(
  ffi.Pointer<ffi.Int32>,
);

typedef _c_Tcl_CreateObjCommand = ffi.Pointer<Tcl_Command_> Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<ffi.Int8> cmdName,
  ffi.Pointer<ffi.NativeFunction<Tcl_ObjCmdProc>> proc,
  ffi.Pointer<ffi.Int32> clientData,
  ffi.Pointer<ffi.NativeFunction<Tcl_CmdDeleteProc>> deleteProc,
);

typedef _dart_Tcl_CreateObjCommand = ffi.Pointer<Tcl_Command_> Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<ffi.Int8> cmdName,
  ffi.Pointer<ffi.NativeFunction<Tcl_ObjCmdProc>> proc,
  ffi.Pointer<ffi.Int32> clientData,
  ffi.Pointer<ffi.NativeFunction<Tcl_CmdDeleteProc>> deleteProc,
);

typedef _c_Tcl_DeleteCommand = ffi.Int32 Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<ffi.Int8> cmdName,
);

typedef _dart_Tcl_DeleteCommand = int Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<ffi.Int8> cmdName,
);

typedef _c_Tcl_GetCommandInfo = ffi.Int32 Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<ffi.Int8> cmdName,
  ffi.Pointer<Tcl_CmdInfo> infoPtr,
);

typedef _dart_Tcl_GetCommandInfo = int Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<ffi.Int8> cmdName,
  ffi.Pointer<Tcl_CmdInfo> infoPtr,
);

typedef Tcl_FreeProc = ffi.Void Function(
  ffi.Pointer<ffi.Int8>,
);

typedef Tcl_FreeInternalRepProc = ffi.Void Function(
  ffi.Pointer<Tcl_Obj>,
);

typedef Tcl_DupInternalRepProc = ffi.Void Function(
  ffi.Pointer<Tcl_Obj>,
  ffi.Pointer<Tcl_Obj>,
);

typedef Tcl_UpdateStringProc = ffi.Void Function(
  ffi.Pointer<Tcl_Obj>,
);

typedef Tcl_SetFromAnyProc = ffi.Int32 Function(
  ffi.Pointer<Tcl_Interp>,
  ffi.Pointer<Tcl_Obj>,
);
