// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: non_constant_identifier_names, camel_case_types, avoid_private_typedef_functions, require_trailing_commas, constant_identifier_names

import 'dart:ffi' as ffi;
import 'tcl_bindings.dart';

/// Bindings to Tcl
class TkBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  TkBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  TkBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int Tk_Init(
    ffi.Pointer<Tcl_Interp> interp,
  ) {
    return _Tk_Init(
      interp,
    );
  }

  late final _Tk_Init_ptr = _lookup<ffi.NativeFunction<_c_Tk_Init>>('Tk_Init');
  late final _dart_Tk_Init _Tk_Init = _Tk_Init_ptr.asFunction<_dart_Tk_Init>();

  void Tk_MainLoop() {
    return _Tk_MainLoop();
  }

  late final _Tk_MainLoop_ptr =
      _lookup<ffi.NativeFunction<_c_Tk_MainLoop>>('Tk_MainLoop');
  late final _dart_Tk_MainLoop _Tk_MainLoop =
      _Tk_MainLoop_ptr.asFunction<_dart_Tk_MainLoop>();

  ffi.Pointer<TkWindow> Tk_MainWindow(
    ffi.Pointer<Tcl_Interp> interp,
  ) {
    return _Tk_MainWindow(
      interp,
    );
  }

  late final _Tk_MainWindow_ptr =
      _lookup<ffi.NativeFunction<_c_Tk_MainWindow>>('Tk_MainWindow');
  late final _dart_Tk_MainWindow _Tk_MainWindow =
      _Tk_MainWindow_ptr.asFunction<_dart_Tk_MainWindow>();

  void Tk_DestroyWindow(
    ffi.Pointer<TkWindow> tkwin,
  ) {
    return _Tk_DestroyWindow(
      tkwin,
    );
  }

  late final _Tk_DestroyWindow_ptr =
      _lookup<ffi.NativeFunction<_c_Tk_DestroyWindow>>('Tk_DestroyWindow');
  late final _dart_Tk_DestroyWindow _Tk_DestroyWindow =
      _Tk_DestroyWindow_ptr.asFunction<_dart_Tk_DestroyWindow>();

  int Tk_GetNumMainWindows() {
    return _Tk_GetNumMainWindows();
  }

  late final _Tk_GetNumMainWindows_ptr =
      _lookup<ffi.NativeFunction<_c_Tk_GetNumMainWindows>>(
          'Tk_GetNumMainWindows');
  late final _dart_Tk_GetNumMainWindows _Tk_GetNumMainWindows =
      _Tk_GetNumMainWindows_ptr.asFunction<_dart_Tk_GetNumMainWindows>();

  ffi.Pointer<TkWindow> Tk_CreateWindowFromPath(
    ffi.Pointer<Tcl_Interp> interp,
    ffi.Pointer<TkWindow> tkwin,
    ffi.Pointer<ffi.Int8> pathName,
    ffi.Pointer<ffi.Int8> screenName,
  ) {
    return _Tk_CreateWindowFromPath(
      interp,
      tkwin,
      pathName,
      screenName,
    );
  }

  late final _Tk_CreateWindowFromPath_ptr =
      _lookup<ffi.NativeFunction<_c_Tk_CreateWindowFromPath>>(
          'Tk_CreateWindowFromPath');
  late final _dart_Tk_CreateWindowFromPath _Tk_CreateWindowFromPath =
      _Tk_CreateWindowFromPath_ptr.asFunction<_dart_Tk_CreateWindowFromPath>();

  ffi.Pointer<TkWindow> Tk_CreateWindow(
    ffi.Pointer<Tcl_Interp> interp,
    ffi.Pointer<TkWindow> parent,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> screenName,
  ) {
    return _Tk_CreateWindow(
      interp,
      parent,
      name,
      screenName,
    );
  }

  late final _Tk_CreateWindow_ptr =
      _lookup<ffi.NativeFunction<_c_Tk_CreateWindow>>('Tk_CreateWindow');
  late final _dart_Tk_CreateWindow _Tk_CreateWindow =
      _Tk_CreateWindow_ptr.asFunction<_dart_Tk_CreateWindow>();

  ffi.Pointer<TkWindow> Tk_NameToWindow(
    ffi.Pointer<Tcl_Interp> interp,
    ffi.Pointer<ffi.Int8> pathName,
    ffi.Pointer<TkWindow> tkwin,
  ) {
    return _Tk_NameToWindow(
      interp,
      pathName,
      tkwin,
    );
  }

  late final _Tk_NameToWindow_ptr =
      _lookup<ffi.NativeFunction<_c_Tk_NameToWindow>>('Tk_NameToWindow');
  late final _dart_Tk_NameToWindow _Tk_NameToWindow =
      _Tk_NameToWindow_ptr.asFunction<_dart_Tk_NameToWindow>();
}

class Display_ extends ffi.Opaque {}

class TkDisplay_ extends ffi.Opaque {}

class Visual_ extends ffi.Opaque {}

class TkMainInfo_ extends ffi.Opaque {}

class TkEventHandler_ extends ffi.Opaque {}

class Tk_GeomMgr_ extends ffi.Opaque {}

class Tk_ClassProcs_ extends ffi.Opaque {}

class _XIC extends ffi.Opaque {}

class XWindowChanges extends ffi.Struct {
  @ffi.Int32()
  external int x;

  @ffi.Int32()
  external int y;

  @ffi.Int32()
  external int width;

  @ffi.Int32()
  external int height;

  @ffi.Int32()
  external int border_width;

  @ffi.Uint64()
  external int sibling;

  @ffi.Int32()
  external int stack_mode;
}

class XSetWindowAttributes extends ffi.Struct {
  @ffi.Uint64()
  external int background_pixmap;

  @ffi.Uint64()
  external int background_pixel;

  @ffi.Uint64()
  external int border_pixmap;

  @ffi.Uint64()
  external int border_pixel;

  @ffi.Int32()
  external int bit_gravity;

  @ffi.Int32()
  external int win_gravity;

  @ffi.Int32()
  external int backing_store;

  @ffi.Uint64()
  external int backing_planes;

  @ffi.Uint64()
  external int backing_pixel;

  @ffi.Int32()
  external int save_under;

  @ffi.Int64()
  external int event_mask;

  @ffi.Int64()
  external int do_not_propagate_mask;

  @ffi.Int32()
  external int override_redirect;

  @ffi.Uint64()
  external int colormap;

  @ffi.Uint64()
  external int cursor;
}

class TkSelHandler extends ffi.Opaque {}

class TkWmInfo extends ffi.Opaque {}

class TkWindowPrivate extends ffi.Opaque {}

class TkWindow extends ffi.Struct {
  external ffi.Pointer<Display_> display;

  external ffi.Pointer<TkDisplay_> dispPtr;

  @ffi.Int32()
  external int screenNum;

  external ffi.Pointer<Visual_> visual;

  @ffi.Int32()
  external int depth;

  @ffi.Uint64()
  external int window;

  external ffi.Pointer<TkWindow> childList;

  external ffi.Pointer<TkWindow> lastChildPtr;

  external ffi.Pointer<TkWindow> parentPtr;

  external ffi.Pointer<TkWindow> nextPtr;

  external ffi.Pointer<TkMainInfo_> mainPtr;

  external ffi.Pointer<ffi.Int8> pathName;

  external ffi.Pointer<ffi.Int8> nameUid;

  external ffi.Pointer<ffi.Int8> classUid;

  external XWindowChanges changes;

  @ffi.Uint32()
  external int dirtyChanges;

  external XSetWindowAttributes atts;

  @ffi.Uint64()
  external int dirtyAtts;

  @ffi.Uint32()
  external int flags;

  external ffi.Pointer<TkEventHandler_> handlerList;

  external ffi.Pointer<_XIC> inputContext;

  external ffi.Pointer<ffi.Pointer<ffi.Int32>> tagPtr;

  @ffi.Int32()
  external int numTags;

  @ffi.Int32()
  external int optionLevel;

  external ffi.Pointer<TkSelHandler> selHandlerList;

  external ffi.Pointer<Tk_GeomMgr_> geomMgrPtr;

  external ffi.Pointer<ffi.Int32> geomData;

  @ffi.Int32()
  external int reqWidth;

  @ffi.Int32()
  external int reqHeight;

  @ffi.Int32()
  external int internalBorderLeft;

  external ffi.Pointer<TkWmInfo> wmInfoPtr;

  external ffi.Pointer<Tk_ClassProcs_> classProcsPtr;

  external ffi.Pointer<ffi.Int32> instanceData;

  external ffi.Pointer<TkWindowPrivate> privatePtr;

  @ffi.Int32()
  external int internalBorderRight;

  @ffi.Int32()
  external int internalBorderTop;

  @ffi.Int32()
  external int internalBorderBottom;

  @ffi.Int32()
  external int minReqWidth;

  @ffi.Int32()
  external int minReqHeight;

  @ffi.Int32()
  external int ximGeneration;

  external ffi.Pointer<ffi.Int8> geomMgrName;

  external ffi.Pointer<TkWindow> maintainerPtr;
}

//const String FFI_SCOPE = 'tk';

typedef _c_Tk_Init = ffi.Int32 Function(
  ffi.Pointer<Tcl_Interp> interp,
);

typedef _dart_Tk_Init = int Function(
  ffi.Pointer<Tcl_Interp> interp,
);

typedef _c_Tk_MainLoop = ffi.Void Function();

typedef _dart_Tk_MainLoop = void Function();

typedef _c_Tk_MainWindow = ffi.Pointer<TkWindow> Function(
  ffi.Pointer<Tcl_Interp> interp,
);

typedef _dart_Tk_MainWindow = ffi.Pointer<TkWindow> Function(
  ffi.Pointer<Tcl_Interp> interp,
);

typedef _c_Tk_DestroyWindow = ffi.Void Function(
  ffi.Pointer<TkWindow> tkwin,
);

typedef _dart_Tk_DestroyWindow = void Function(
  ffi.Pointer<TkWindow> tkwin,
);

typedef _c_Tk_GetNumMainWindows = ffi.Int32 Function();

typedef _dart_Tk_GetNumMainWindows = int Function();

typedef _c_Tk_CreateWindowFromPath = ffi.Pointer<TkWindow> Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<TkWindow> tkwin,
  ffi.Pointer<ffi.Int8> pathName,
  ffi.Pointer<ffi.Int8> screenName,
);

typedef _dart_Tk_CreateWindowFromPath = ffi.Pointer<TkWindow> Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<TkWindow> tkwin,
  ffi.Pointer<ffi.Int8> pathName,
  ffi.Pointer<ffi.Int8> screenName,
);

typedef _c_Tk_CreateWindow = ffi.Pointer<TkWindow> Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<TkWindow> parent,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> screenName,
);

typedef _dart_Tk_CreateWindow = ffi.Pointer<TkWindow> Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<TkWindow> parent,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> screenName,
);

typedef _c_Tk_NameToWindow = ffi.Pointer<TkWindow> Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<ffi.Int8> pathName,
  ffi.Pointer<TkWindow> tkwin,
);

typedef _dart_Tk_NameToWindow = ffi.Pointer<TkWindow> Function(
  ffi.Pointer<Tcl_Interp> interp,
  ffi.Pointer<ffi.Int8> pathName,
  ffi.Pointer<TkWindow> tkwin,
);
